#!/bin/sh
#
# Configuration script, to be run before making examples
#
# Author: M. Kirsanov

#
# User-changeable part -------------------------------
#

#LCG platform. Can be needed if external libraries are specified
if [ x$MYLCGPLATFORM = x ]; then
  export MYLCGPLATFORM=x86_64-slc5-gcc43-opt
fi

#Compilation mode. Is not changed if specified outside
if [ x$COMPMODE = x ]; then
  export COMPMODE=OPT
fi
#if [ x$COMPMODE = x ]; then
#  export COMPMODE=DBG
#fi

# check arguments

for arg in $* ; do
  if [ "x$arg" = "x--enable-debug" ] ; then
    COMPMODE=DBG
  elif [ "x$arg" = "x--enable-optimize" ] ; then
    COMPMODE=OPT
  elif [ "x$arg" = "x--help" ] ; then
    echo "Usage: ./configure [options] , where options are:"
    echo "--help            : prints this help"
    echo "--enable-optimize : turns on compiler optimizations (default)"
    echo "--enable-debug    : turns on debugging flags"
    echo "--enable-shared   : use shared library (not yet implem.) (default no)"
    echo "--lcgplatform=lcgplatformname : platform, default is x86_64-slc5-gcc43-opt"
    echo "--with-pythia6=p6path    : path to pythia6 installation dir to find libs, includes and pars (default is ..)"
    echo "--with-hepmc=path     : path to HepMC library to build examples that use it"
    echo "--with-hepmcversion=v : HepMC version (simplified alternative when using CERN AFS LCG external, e.g. =2.06.07)"
    echo "--with-lhapdf=lhapdfpath : path to LHAPDF libraries dir (LHAPDF must be version 5.3 or higher)"
    echo "--with-lhapdfversion=v   : LHAPDF version (simplified alternative when using CERN AFS MCGenerators, e.g. =5.7.0)"
    echo "--with-lhapdflibname=n   : lhapdf library name line (default is -lLHAPDF)"
    echo "--with-lhapdfsets=path   : path to LHAPDF data (default is lhapdfpath/../PDFsets, CERN AFS default is lhapdfpath/../../../share/PDFsets)"
    exit
  elif [ x`echo x${arg} | grep "="` != x ] ; then
    option=`echo ${arg} | awk -F = '{print $1}'`
    value=`echo ${arg} | awk -F = '{print $2}'`
    if [ "x${option}" = "x--lcgplatform" ] ; then
      MYLCGPLATFORM=${value}
    elif [ "x${option}" = "x--with-pythia8" ] ; then
      PYTHIA6LOCATION=${value}
    elif [ "x${option}" = "x--with-hepmcversion" ] ; then
      HEPMCVERSION=${value}
    elif [ "x${option}" = "x--with-hepmc" ] ; then
      HEPMCLOCATION=${value}
    elif [ "x${option}" = "x--with-lhapdfversion" ] ; then
      LHAPDFVERSION=${value}
    elif [ "x${option}" = "x--with-lhapdf" ] ; then
      LHAPDFLOCATION=${value}
    elif [ "x${option}" = "x--with-lhapdflibname" ] ; then
      LHAPDFLIBNAME=${value}
    elif [ "x${option}" = "x--with-lhapdfsets" ] ; then
      LHAPDFSETSLOCATION=${value}
    else
      echo "${arg}: wrong option. Ignored." >&2
    fi
  fi
done

echo compilation mode is $COMPMODE

# Environment variables for building HepMC interface library. Note that
# the HepMC interface library is used by the examples main31, main32.
# Attention: if you have already run these examples and you change HepMC
# version you should reset your LD_LIBRARY_PATH
# The default values here correspond to CERN AFS lcg external
#
if [ "x${HEPMCVERSION}" != "x" ] ; then
  if [ "x${HEPMCLOCATION}" = "x" ] ; then
    export HEPMCLOCATION=/afs/cern.ch/sw/lcg/external/HepMC/${HEPMCVERSION}/${MYLCGPLATFORM}
  fi
fi
#   If you want to assign these variables by hand:
#
#export HEPMCVERSION=2.04.00
#export HEPMCLOCATION=/afs/cern.ch/sw/lcg/external/HepMC/${HEPMCVERSION}/${MYLCGPLATFORM}

if [ "x${HEPMCVERSION}" = "x" ] ; then
  if [ "x${HEPMCLOCATION}" != "x" ] ; then
#                                            try to find out which HepMC version
    test1=`echo $HEPMCLOCATION | grep \/1.`
    test2=`echo $HEPMCLOCATION | grep \/2.`
    echo $test1
    echo $test2
    if [ "x${test1}" != "x" ] ; then
      echo "Warning: HepMC 1 cannot be used anymore; Please use HepMC 2"
      echo "         The interface will not be built"
      export HEPMCLOCATION=
    fi
    if [ "x${test2}" != "x" ] ; then
      export HEPMCVERSION=2.`echo $HEPMCLOCATION | awk -F \/2. '{print $2}' | awk -F \/ '{print $1}'`
    fi
  fi
fi
if [ "x${HEPMCVERSION}" != "x" ] ; then
  export HEPMCMAINVERSION=`echo ${HEPMCVERSION} | awk -F . '{print$1}'`
  if [ ${HEPMCMAINVERSION} = 1 ] ; then
    echo "Warning: HepMC 1 cannot be used anymore; Please use HepMC 2"
    echo "         The interface will not be built"
    export HEPMCLOCATION=
  fi
fi
if [ "x${HEPMCLOCATION}" != "x" ] ; then
  if [ "x${HEPMCVERSION}" = "x" ] ; then
    echo "Warning: hepmc specified, but cannot find out which HepMC version"
    echo "Warning: if you specify HepMC 1 the compilation of interface will fail"
  fi
fi

# LHAPDF location
# The default values here correspond to CERN AFS (but you may want to change
# the version and/or platform).

if [ x${LHAPDFLOCATION} != x ]; then
  if [ x${LHAPDFSETSLOCATION} = x ]; then
    export LHAPDFSETSLOCATION=${LHAPDFLOCATION}/../PDFsets
    if [ ! -d ${LHAPDFSETSLOCATION} ]; then
      export LHAPDFSETSLOCATION=${LHAPDFLOCATION}/../../share/lhapdf/PDFsets
    fi
    if [ ! -d ${LHAPDFSETSLOCATION} ]; then
      export LHAPDFSETSLOCATION=${LHAPDFLOCATION}/../share/lhapdf/PDFsets
    fi
  fi
fi
if [ x${LHAPDFVERSION} = x ]; then
  export LHAPDFVERSION=5.7.0
else
  if [ x${LHAPDFLOCATION} = x ]; then
    export LHAPDFLOCATION=/afs/cern.ch/sw/lcg/external/MCGenerators/lhapdf/${LHAPDFVERSION}/${MYLCGPLATFORM}/lib/archive
    if [ x${LHAPDFSETSLOCATION} = x ]; then
      export LHAPDFSETSLOCATION=/afs/cern.ch/sw/lcg/external/MCGenerators/lhapdf/${LHAPDFVERSION}/share/PDFsets
    fi
  fi
fi
if [ x${LHAPDFLOCATION} = x ]; then
  export LHAPDFLOCATION=/afs/cern.ch/sw/lcg/external/MCGenerators/lhapdf/${LHAPDFVERSION}/${MYLCGPLATFORM}/lib/archive
fi
if [ x${LHAPDFLIBNAME} = x ]; then
  export LHAPDFLIBNAME="-lLHAPDF"
fi
if [ x${LHAPDFSETSLOCATION} = x ]; then
  export LHAPDFSETSLOCATION=/afs/cern.ch/sw/lcg/external/MCGenerators/lhapdf/${LHAPDFVERSION}/share/PDFsets
fi

#
# User-changeable part, experts  -----------------------------
#

# export FFLAGS_OPT="-O2 -Wuninitialized"
# -Wuninitialized outputs many irrelevant warnings and therefore obscurs 
export FFLAGS_OPT="-O2"
export FFLAGS_DBG=-g
export CFLAGS_OPT=-O2
export CFLAGS_DBG=-g
export CXXFLAGS_OPT="-O2 -ansi -pedantic -W -Wall"
export CXXFLAGS_DBG="-g -ansi -pedantic -W -Wall"
#
# Find platform.
#
export ARCH="`uname`"
export theGcc=`g++ --version | head -n 1 | awk '{print$3}' | awk -F . '{print $1}'`
if [ ${theGcc} = 4 ]; then
  export ARCH=${ARCH}-gcc4
fi
echo Platform is $ARCH

#default platform settings:
export FC=g77
export FFLAGS="${FFLAGS_OPT}"
export CFLAGS="${CFLAGS_OPT}"
export CXXFLAGS="${CXXFLAGS_OPT}"
export FLIBS="-lfrtbegin -lg2c"
if [ ${COMPMODE} = OPT ]; then
  export FFLAGS="${FFLAGS_OPT}"
  export CFLAGS="${CFLAGS_OPT}"
  export CXXFLAGS="${CXXFLAGS_OPT}"
fi
if [ ${COMPMODE} = DBG ]; then
  export FFLAGS="${FFLAGS_DBG}"
  export CFLAGS="${CFLAGS_DBG}"
  export CXXFLAGS="${CXXFLAGS_DBG}"
fi
if [ $ARCH = Linux ]; then
  export FC=g77
  export FFLAGS="${FFLAGS_OPT} -Wno-globals"
  export CFLAGS="${CFLAGS_OPT}"
  export CXXFLAGS="${CXXFLAGS_OPT}"
  export FLIBS="-lfrtbegin -lg2c"
  if [ ${COMPMODE} = OPT ]; then
    export FFLAGS="${FFLAGS_OPT}"
    export CFLAGS="${CFLAGS_OPT}"
    export CXXFLAGS="${CXXFLAGS_OPT}"
  fi
  if [ ${COMPMODE} = DBG ]; then
    export FFLAGS="${FFLAGS_DBG} -Wno-globals"
    export CFLAGS="${CFLAGS_DBG}"
    export CXXFLAGS="${CXXFLAGS_DBG}"
  fi
fi
# Linux platform with gcc4: new Fortran90 compiler.
if [ $ARCH = Linux-gcc4 ]; then
  export FC=gfortran
  export FFLAGS="${FFLAGS_OPT}"
  export CFLAGS="${CFLAGS_OPT}"
  export CXXFLAGS="${CXXFLAGS_OPT}"
  export FLIBS="-lgfortran -lgfortranbegin"
  if [ ${COMPMODE} = OPT ]; then
    export FFLAGS="${FFLAGS_OPT}"
    export CFLAGS="${CFLAGS_OPT}"
    export CXXFLAGS="${CXXFLAGS_OPT}"
  fi
  if [ ${COMPMODE} = DBG ]; then
    export FFLAGS="${FFLAGS_DBG}"
    export CFLAGS="${CFLAGS_DBG}"
    export CXXFLAGS="${CXXFLAGS_DBG}"
  fi
fi

#Platform & opt/dbg - independent flags and variables:


#
# End of the user-changeable part ---------------------------
#
# Checks
#
if [ $?HEPMCLOCATION ]; then
  if [ x${HEPMCLOCATION} != x ]; then
    if [ ! -d ${HEPMCLOCATION}/include ]; then
      echo ERROR in HEPMCLOCATION: directory ${HEPMCLOCATION}/include does not exist
    fi
    if [ ! -d ${HEPMCLOCATION}/lib ]; then
      echo ERROR in HEPMCLOCATION: directory ${HEPMCLOCATION}/lib does not exist
    fi
  fi
fi
if [ $?LHAPDFLOCATION ]; then
  if [ x${LHAPDFLOCATION} != x ]; then
    if [ ! -d ${LHAPDFLOCATION} ]; then
      echo ERROR in LHAPDFLOCATION: directory ${LHAPDFLOCATION} does not exist
    fi
    if [ ! -d ${LHAPDFSETSLOCATION} ]; then
      echo ERROR in LHAPDFSETSLOCATION: directory ${LHAPDFSETSLOCATION} does not exist
    fi
  fi
fi

rm -f config.mk

echo SHELL = /bin/sh > config.mk
echo ARCH = ${ARCH} >> config.mk
echo FC = ${FC} >> config.mk
echo FFLAGS = ${FFLAGS} >> config.mk
echo CFLAGS = ${CFLAGS} >> config.mk
echo CXXFLAGS = ${CXXFLAGS} >> config.mk
echo FLIBS = ${FLIBS} >> config.mk
echo PYTHIA6LOCATION = ${PYTHIA6LOCATION} >> config.mk
#
if [ x${HEPMCVERSION} != x ]; then
  echo HEPMCVERSION = ${HEPMCVERSION} >> config.mk
fi
if [ x${HEPMCLOCATION} != x ]; then
  echo HEPMCLOCATION = ${HEPMCLOCATION} >> config.mk
fi
if [ x${LHAPDFVERSION} != x ]; then
  echo LHAPDFVERSION = ${LHAPDFVERSION} >> config.mk
fi
if [ x${LHAPDFLOCATION} != x ]; then
  echo LHAPDFLOCATION = ${LHAPDFLOCATION} >> config.mk
fi
#
#
#
rm -f config.sh
rm -f config.csh
if [ x${HEPMCLOCATION} != x ]; then
  echo "#!/bin/csh" > config.csh
  echo 'if( ! $?LD_LIBRARY_PATH ) then' >> config.csh
  echo "  setenv LD_LIBRARY_PATH ${HEPMCLOCATION}/lib" >> config.csh
  echo "else" >> config.csh
  echo "  setenv LD_LIBRARY_PATH" '${LD_LIBRARY_PATH}'":${HEPMCLOCATION}/lib" >> config.csh
  echo "endif" >> config.csh
  if [ x${CLHEPLOCATION} != x ]; then
    echo "setenv LD_LIBRARY_PATH" '${LD_LIBRARY_PATH}'":${CLHEPLOCATION}/lib" >> config.csh
  fi
  echo "#!/bin/sh" > config.sh
  echo 'if [ ! $?LD_LIBRARY_PATH ]; then' >> config.sh
  echo "  export LD_LIBRARY_PATH=${HEPMCLOCATION}/lib" >> config.sh
  echo fi >> config.sh
  echo 'if [ $?LD_LIBRARY_PATH ]; then' >> config.sh
  echo "  export LD_LIBRARY_PATH="'${LD_LIBRARY_PATH}'":${HEPMCLOCATION}/lib" >> config.sh
  echo fi >> config.sh
fi
if [ x${LHAPDFLOCATION} != x ]; then
  if [ ! -e config.csh ]; then
    echo "#!/bin/csh" > config.csh
    echo 'if( ! $?LD_LIBRARY_PATH ) then' >> config.csh
    echo "  setenv LD_LIBRARY_PATH ${LHAPDFLOCATION}/lib" >> config.csh
    echo "else" >> config.csh
    echo "  setenv LD_LIBRARY_PATH" '${LD_LIBRARY_PATH}'":${LHAPDFLOCATION}/lib" >> config.csh
    echo "endif" >> config.csh
    echo "setenv LHAPATH ${LHAPDFSETSLOCATION}" >> config.csh
    echo "#!/bin/sh" > config.sh
    echo 'if [ ! $?LD_LIBRARY_PATH ]; then' >> config.sh
    echo "  export LD_LIBRARY_PATH=${LHAPDFLOCATION}/lib" >> config.sh
    echo fi >> config.sh
    echo 'if [ $?LD_LIBRARY_PATH ]; then' >> config.sh
    echo "  export LD_LIBRARY_PATH="'${LD_LIBRARY_PATH}'":${LHAPDFLOCATION}/lib" >> config.sh
    echo fi >> config.sh
    echo "export LHAPATH=${LHAPDFSETSLOCATION}" >> config.sh
  else
    echo 'if( ! $?LD_LIBRARY_PATH ) then' >> config.csh
    echo "  setenv LD_LIBRARY_PATH ${LHAPDFLOCATION}/lib" >> config.csh
    echo "else" >> config.csh
    echo "  setenv LD_LIBRARY_PATH" '${LD_LIBRARY_PATH}'":${LHAPDFLOCATION}/lib" >> config.csh
    echo "endif" >> config.csh
    echo "setenv LHAPATH ${LHAPDFSETSLOCATION}" >> config.csh
    echo 'if [ ! $?LD_LIBRARY_PATH ]; then' >> config.sh
    echo "  export LD_LIBRARY_PATH=${LHAPDFLOCATION}/lib" >> config.sh
    echo fi >> config.sh
    echo 'if [ $?LD_LIBRARY_PATH ]; then' >> config.sh
    echo "  export LD_LIBRARY_PATH="'${LD_LIBRARY_PATH}'":${LHAPDFLOCATION}/lib" >> config.sh
    echo fi >> config.sh
    echo "export LHAPATH=${LHAPDFSETSLOCATION}" >> config.sh
  fi
fi
